name: Manual Deploy to Windows IIS (FTP + app_offline)

on:
  workflow_dispatch: {}   # rulează doar manual din Actions

jobs:
  build-and-deploy:
    runs-on: windows-latest
    env:
      CONFIGURATION: Release
      PUBLISH_DIR: publish
      PROJECT_PATH: src/Presentation/Nop.Web/Nop.Web.csproj   # <- ajustează dacă ai altă structură

    steps:
      # 1) Ia codul
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2) .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x   # schimbă dacă folosești altă versiune

      # 3) (opțional) afișează rapid structura repo pentru debug
      # - name: Quick tree
      #   shell: pwsh
      #   run: |
      #     Get-ChildItem -Depth 2
      #     Write-Host "---- csproj files ----"
      #     Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object { $_.FullName }

      # 4) Verifică faptul că PROJECT_PATH există
      - name: Verify project path
        shell: pwsh
        run: |
          Write-Host "Looking for: $env:PROJECT_PATH"
          if (-not (Test-Path $env:PROJECT_PATH)) {
            Write-Host "Project not found. Listing candidates:"
            Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object { $_.FullName }
            throw "Project file not found at $env:PROJECT_PATH"
          }

      # 5) Restore
      - name: Restore
        run: dotnet restore

      # 6) Publish (framework-dependent; serverul are .NET Runtime instalat)
      - name: Publish .NET
        shell: pwsh
        run: |
          dotnet publish "$env:PROJECT_PATH" `
            -c $env:CONFIGURATION `
            -o $env:PUBLISH_DIR `
            -r win-x64 `
            --self-contained false `
            -p:PublishReadyToRun=true
      # Dacă serverul NU are runtime, înlocuiește linia de mai sus cu:
      # dotnet publish "$env:PROJECT_PATH" `
      #   -c $env:CONFIGURATION `
      #   -o $env:PUBLISH_DIR `
      #   -r win-x64 `
      #   --self-contained true `
      #   -p:PublishReadyToRun=true `
      #   -p:IncludeNativeLibrariesForSelfExtract=true

      # 7) Vezi ce s-a publicat
      - name: List publish output
        run: dir $env:PUBLISH_DIR

      # 8) Pregătește fișierul de mentenanță din repo (_app_offline.htm -> app_offline.htm)
      #    Presupunem că ai _app_offline.htm în rădăcina repo-ului. Ajustează calea dacă e în altă parte.
      - name: Prepare offline file from repo
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path offline | Out-Null
          Copy-Item -Path "_app_offline.htm" -Destination "offline/app_offline.htm" -Force

      # 9) Pune site-ul offline (urcă app_offline.htm)
      - name: Take site offline (upload app_offline.htm)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server:     ${{ secrets.FTP_SERVER }}
          username:   ${{ secrets.FTP_USERNAME }}
          password:   ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_DIR }}     # ex: site/wwwroot/ sau httpdocs/ sau ./
          local-dir:  ./offline
          protocol:   ftp
          exclude: |
            **/.git*
            **/.github/**

      # 10) Așteaptă eliberarea DLL-urilor de către IIS
      - name: Wait IIS to unload app
        run: Start-Sleep -Seconds 8

      # 11) Deploy fișierele publicate (fără să atingi app_offline.htm)
      - name: Deploy site files (while offline)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server:     ${{ secrets.FTP_SERVER }}
          username:   ${{ secrets.FTP_USERNAME }}
          password:   ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_DIR }}
          local-dir:  ${{ env.PUBLISH_DIR }}
          protocol:   ftp
          exclude: |
            **/app_offline.htm
            **/.git*
            **/.github/**
            **/*.pdb
            **/*.md
            **/*.map
            **/*.xml
            **/node_modules/**
            # nopCommerce: NU suprascrie setările de pe server
            **/App_Data/dataSettings.json
            **/App_Data/plugins.json
            **/App_Data/appsettings.json
            **/appsettings.Production.json

      # 12) Adu site-ul online (șterge app_offline.htm)
      - name: Bring site online (delete app_offline.htm)
        shell: pwsh
        run: |
          $server = "${{ secrets.FTP_SERVER }}"
          $dir    = "${{ secrets.FTP_DIR }}".TrimEnd('/')
          $user   = "${{ secrets.FTP_USERNAME }}"
          $pass   = "${{ secrets.FTP_PASSWORD }}"

          $url = if ($dir -eq "." -or [string]::IsNullOrWhiteSpace($dir)) {
            "ftp://$server/app_offline.htm"
          } else {
            "ftp://$server/$dir/app_offline.htm"
          }

          $req = [System.Net.FtpWebRequest]::Create($url)
          $req.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile
          $req.Credentials = New-Object System.Net.NetworkCredential($user, $pass)
          try {
            $resp = $req.GetResponse(); $resp.Close()
          } catch {
            Write-Host "Warning: couldn't delete app_offline.htm ($_)"
          }
